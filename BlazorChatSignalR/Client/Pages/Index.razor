@page "/"
@using BlazorChatSignalR.Shared
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Dice game</PageTitle>
<h3>Dice game</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="playerOneName" class="form-control" placeholder="Who dares to...?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <div class="game-board">
        <div>
            <h4>@playerOneName</h4>
            <p>@dicePlayerOne</p>
        </div>
        <div>
            @if (!String.IsNullOrEmpty(playerTwoName))
            {
                <h4>@playerTwoName</h4>
                <p>@dicePlayerTwo</p>
            }
            else
            {
                <p>Player not connected...</p>
            }
        </div>
    </div>
    <div class="input-group">
        <button class="btn btn-primary form-group-append"
            @onclick="RollTheDice"
            disabled="@(!IsConnected)">
            Roll the dice
        </button>
    </div>
    <div>
        <h4>Players connected:</h4>
        @foreach (var player in connectedPlayers)
        {
            <p>@player.Name</p>
        }
    </div>
}

@code {
    private HubConnection? hubConnection;
    private string playerOneName = string.Empty;
    private int dicePlayerOne = 0;
    private string playerTwoName = string.Empty;
    private int dicePlayerTwo = 0;
    private List<Player> connectedPlayers = new List<Player>();

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/dicegamehub?username={playerOneName}"))
            .Build();

        hubConnection.On<List<Player>>("ReceiveRoll", async (rollPlayers) =>
        {
            await UpdatePlayers(rollPlayers);
            StateHasChanged();
        });

        hubConnection.On<List<Player>>("ReceivePlayers", async (connectedPlayers) =>
        {
            await UpdatePlayers(connectedPlayers);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task RollTheDice()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("RollTheDice");
        }
    }

    private async Task UpdatePlayers(List<Player> players)
    {
        if(players.Count > 0)
        {
            connectedPlayers = players;
            playerOneName = players.First().Name;
            dicePlayerOne = players.First().Roll;

            if (players.Count == 2)
            {
                playerTwoName = players.Last().Name;
                dicePlayerTwo = players.Last().Roll;
            }
        }

        await Task.CompletedTask;
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await RollTheDice();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
