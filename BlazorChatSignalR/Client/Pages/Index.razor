@page "/"
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Dice game</PageTitle>
<h3>Dice game</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="username" class="form-control" placeholder="Who dares to...?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <div class="game-board">
        <div>
            <h4>@username</h4>
            <p>@dice</p>
        </div>
        @* <div>
            <h4>Player 2</h4>
            <p>@DiceGame.Player2Roll</p>
        </div> *@
    </div>
    <div class="input-group">
        <button class="btn btn-primary form-group-append"
            @onclick="RollTheDice"
            disabled="@(!IsConnected)">
            Roll the dice
        </button>
    </div>
    <div>
        <h4>Players:</h4>
        @foreach (var player in players)
        {
            <p>@player</p>
        }
    </div>
}

@code {
    private HubConnection? hubConnection;
    private string username = string.Empty;
    private int dice = 0;
    private List<string> players = new List<string>();

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/dicegamehub?username={username}"))
            .Build();

        hubConnection.On<string, int>("ReceiveRoll", (user, roll) =>
        {
            dice = roll;
            StateHasChanged();
        });

        hubConnection.On<List<string>>("ReceivePlayers", (connectedPlayers) =>
        {
            players = connectedPlayers;
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task RollTheDice()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("RollTheDice", username);
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await RollTheDice();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
